Lecture;Topic;Section;Text
4;The Stable Matching Problem;The Stable Matching Problem I;"Suppose you run an employment system, and your task is to match up n jobs and n candidates. Each job has an ordered preference list of the n candidates, and each candidate has a similar list of the n jobs. For example, consider the case of n = 3, i.e., three jobs at Approximation Inc., Basis Co., and Control Corp., and three candidates Anita, Bridget, and Christine, with the following preference lists (lists are ordered from most favorable to least favorable)."
4;The Stable Matching Problem;The Stable Matching Problem II;"What you would like to do as head of the employment system is to match each job with a candidate. For example, two possible matchings are {(Approximation Inc., Anita), (Basis Co., Bridget), (Control Corp., Christine)} and {(Approximation Inc., Bridget), (Basis Co., Christine), (Control Corp., Anita)}. However, you don’t want just any old matching! In order for your employment system to be successful, you wish the matching to make “everyone happy”, in that nobody can realistically hope to benefit by switching jobs. Can you do this efficiently?."
4;The Propose-and-Reject Algorithm;The Propose-and-Reject Algorithm I;"Every Morning: Each job proposes (i.e. makes an offer) to the most preferred candidate on its list who has not yet rejected this job. Every Afternoon: Each candidate collects all the offers she received in the morning, to the job offer she likes best among these, she responds “maybe” (she now has it in hand or on a string), and to the other offers she says “no” (i.e., she rejects them). (This is just a way for us to virtually model that there are no “exploding offers” and a job can’t withdraw an offer once an offer is made.) Every Evening: Each rejected job crosses off the candidate who rejected its offer from its list. The above loop is repeated each successive day until there are no offers rejected. At that point, each candidate has a job offer in hand (i.e. on a string) and on this day, each candidate accepts their offered job (i.e. the job offer she has in hand) and the algorithm terminates."
4;The Residency Match;The Residency Match I;"Perhaps the most well-known application of the Stable Matching Algorithm is the residency match program, which pairs medical school graduates and residency slots (internships) at teaching hospitals. Graduates and hospitals submit their ordered preference lists, and the stable matching produced by a computer matches students with residency programs."
4;Properties of the Propose-and-Reject Algorithm;Properties of the Propose-and-Reject Algorithm I;"There are two properties we wish to show about the propose-and-reject algorithm: First, that it doesn’t run forever and second, that it outputs a “good” (i.e., stable) matching. The former is easy to show. Lemma 4.1. The propose-and-reject algorithm always halts. Proof. The argument is simple: On each day that the algorithm does not halt, at least one job must eliminate some candidate from its list (otherwise the halting condition for the algorithm would be invoked). Since each list has n elements, and there are n lists, this means that the algorithm must terminate in at most n^2 iterations (days)."
4;Properties of the Propose-and-Reject Algorithm;Stability I;"In this lecture we will focus on a much more basic criterion that is rooted in the idea of autonomy, namely stability. A matching is unstable if there is a job and a candidate who both prefer working with each other over their current matchings. We will call such a pair a rogue couple. So a matching of n jobs and n candidates is stable if it has no rogue couples."
4;Properties of the Propose-and-Reject Algorithm;Stability II;"Do stable matchings always exist? Surely the answer is yes, since we could start with any matching and seemingly make it more and more stable as follows: If there is a rogue couple, modify the current matching so that this couple is matched up. Repeat. Surely this procedure must result in a stable matching? Unfortunately this reasoning is not sound! Why? Although pairing up the rogue couple reduces the number of rogue couples by one, it may also create new rogue couples. So it is not at all clear that this procedure will terminate!"
4;Properties of the Propose-and-Reject Algorithm;Analysis I;"Observation 4.1. Each job begins the algorithm with its first choice being a possibility; as the algorithm proceeds, however, its best available option can only get worse over time. In contrast, each candidate’s offers can only get better with time."
4;Properties of the Propose-and-Reject Algorithm;Analysis II;"Lemma 4.2 (Improvement Lemma). If job J makes an offer to candidate C on the kth day, then on every subsequent day C has a job offer in hand (on a string) which she likes at least as much as J. Definition 4.1 (Well-ordering principle). If S $\subseteq$ N and S 6 = /0, then S has a smallest element."
4;Properties of the Propose-and-Reject Algorithm;Analysis III;"Lemma 4.3. The propose-and-reject algorithm always terminates with a matching. Proof. We proceed by contradiction. Suppose that there is a job J that is left unpaired when the algorithm terminates. It must have made an offer to all n of the candidates on its list and been rejected by all of them. By the Improvement Lemma, since its offer was rejected, each of these n candidates has had a better offer in hand since J made an offer to her. Thus, when the algorithm terminates, n candidates have n jobs on a string not including J. So there must be at least n + 1 jobs. But this is a contradiction, since there are only n jobs by assumption."
4;Properties of the Propose-and-Reject Algorithm;Optimality I;"Definition 4.2 (Optimal candidate for a job). For a given job J, the optimal candidate for J is the highest rank candidate on J’s preference list that J could be paired with in any stable matching. In other words, the optimal candidate is the best that a job can do in a matching, given that the matching is stable."
4;Properties of the Propose-and-Reject Algorithm;Optimality II;"Definition 4.3 (Optimal job for a candidate). For a given candidate C, the optimal job for C is the highest-ranked job on C’s preference list that C could be paired with in any stable matching. In other words, the optimal job is the best job that a candidate could get in a matching, given that the matching is stable. We can also go in the opposite direction and define the pessimal candidate for a job to be the lowest ranked candidate that it is ever paired with in some stable matching. This leads naturally to the notion of a employer pessimal matching."
4;Properties of the Propose-and-Reject Algorithm;Optimality III;"Theorem 4.2. The matching output by the Propose-and-Reject algorithm is job/employer optimal. Proof. Suppose for sake of contradiction that the matching is not employer optimal. Then, there exists a day on which some job had its offer rejected by its optimal candidate. Let day k be the first such day. On this day, suppose J was rejected by C∗ (its optimal candidate) in favor of an offer from J∗. By the definition of optimal candidate, there must exist a stable matching T in which J and C∗ are paired together. Suppose T looks like this: {. . . , (J,C∗), . . . , (J∗,C′), . . .}. We will argue that (J∗,C∗) is a rogue couple in T , thus contradicting stability. First, it is clear that C∗ prefers J∗ to J, since she rejected an offer from J in favor of an offer from J∗ during the execution of the propose-and-reject algorithm. Moreover, since day k was the first day when some job had an offer rejected by its optimal candidate, before day k, job J∗ had not had its offer rejected by its optimal candidate. Since J∗ made an offer to C∗ on day k, this implies that J∗ likes C∗ at least as much as its optimal candidate, and therefore at least as much as C′ (its partner in the stable matching T ). Therefore, (J∗,C∗) form a rogue couple in T , and so T is not stable. Thus, we have a contradiction, implying the matching output by the propose-and-reject algorithm must be employer/job optimal."
4;Properties of the Propose-and-Reject Algorithm;Optimality IV;"Theorem 4.3. If a matching is employer/job optimal, then it is also candidate pessimal. Proof. We proceed by contradiction. Let T = {. . . , (J,C), . . .} be the employer optimal matching (which we know from Theorem 4.2 is output by the algorithm). Suppose for the sake of contradiction that there exists a stable matching S = {. . . , (J∗,C), . . . , (J,C′), . . .} such that job J∗ is lower-ranked on C’s preference list than job J (i.e., J is not her pessimal job). We will argue that S cannot be stable by showing that (J,C) is a rogue couple in S. By assumption, C prefers job J to J∗ since J∗ is lower on her list. And J prefers candidate C to its partner C′ in S because C is its partner in the employer optimal matching T. Contradiction. Therefore, the employer optimal matching is candidate pessimal."
